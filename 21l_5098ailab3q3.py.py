# -*- coding: utf-8 -*-
"""21L-5098AIlab3Q3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WeKIWDqhWPKRpCnJEnhJ6M-OAi7oOt0C
"""

from collections import deque

class Graph:
    def __init__(self, adjacency_list):
        # Initialize the graph with adjacency list
        self.adjacency_list = adjacency_list

    def get_neighbors(self, v):
        # Return the neighbors of vertex v
        return self.adjacency_list[v]

    def h(self, n):
        # Heuristic function: estimates the cost from node n to the goal
        H = {
            'The': 4,
            'cat': 3,
            'dog': 3,
            'runs': 2,
            'fast': 1
        }
        return H.get(n, 0)

    def a_star_algorithm(self, start_node, stop_node):
        # Implements the A* search algorithm to find the optimal path
        open_list = set([start_node])
        closed_list = set([])

        # Cost from start node to all other nodes
        g = {}
        g[start_node] = 0

        # Parent dictionary to reconstruct path
        parents = {}
        parents[start_node] = start_node

        while len(open_list) > 0:
            n = None

            # Find node with lowest f(n) = g(n) + h(n)
            for v in open_list:
                if n == None or g[v] + self.h(v) < g[n] + self.h(n):
                    n = v

            if n == stop_node:
                # Reconstruct path
                path = []
                while parents[n] != n:
                    path.append(n)
                    n = parents[n]
                path.append(start_node)
                path.reverse()
                print("Sentence:", " ".join(path))
                print("Total cost:", g[stop_node])
                return path

            # Explore neighbors
            for (m, weight) in self.get_neighbors(n):
                if m not in open_list and m not in closed_list:
                    open_list.add(m)
                    parents[m] = n
                    g[m] = g[n] + weight
                else:
                    if g[m] > g[n] + weight:
                        g[m] = g[n] + weight
                        parents[m] = n
                        if m in closed_list:
                            closed_list.remove(m)
                            open_list.add(m)

            open_list.remove(n)
            closed_list.add(n)

        print("Path does not exist!")
        return None
# Define the graph with adjacency list and weights
adjacency_list = {
    'The': [('cat', 2), ('dog', 3)],
    'cat': [('runs', 2)],
    'dog': [('runs', 3)],
    'runs': [('fast', 2)],
    'fast': []
}
# Create graph instance and run algorithm
graph = Graph(adjacency_list)
graph.a_star_algorithm('The', 'fast')