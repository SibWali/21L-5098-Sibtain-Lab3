# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1atEpSt5jJr9CPaDw76RNZXAPywCQl4tx
"""



from collections import deque

def find_shortest_path(matrix):
    # Directions: Up, Down, Left, Right
    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]
    # Initialize starting and ending position
    start = (0, 0)
    end = (3, 3)
    # Initialize data structures for BFS
    queue = deque([(start, [start])])
    visited = set([start])
    distance = {start: 0}

    while queue:
        current, path = queue.popleft()
        # if the person is at end position return path
        if current == end:
            return path

        # check all possible directions for Ali (fixed indentation here)
        for dx, dy in directions:
            new_x, new_y = current[0] + dx, current[1] + dy
            new_position = (new_x, new_y)
            # check if Ali moving direction is valid or not
            if (0 <= new_x < 4 and 0 <= new_y < 4 and
                new_position not in visited):
                visited.add(new_position)
                distance[new_position] = distance[current] + 1
                queue.append((new_position, path + [new_position]))

    return None

def visualize_path(path):
    # Create a 4x4 matrix with dots
    matrix = [['.' for _ in range(4)] for _ in range(4)]

    # Mark the path with numbers
    for i, (x, y) in enumerate(path):
        if i == 0:
            matrix[x][y] = 'S'  # Start
        elif i == len(path) - 1:
            matrix[x][y] = 'E'  # End
        else:
            matrix[x][y] = str(i)

    # Print the matrix
    print("\nPath Visualization:")
    print("S = Start, E = End, . = Unused cell, Numbers = Path steps")
    print("-" * 13)
    for row in matrix:
        print("|", " ".join(row), "|")
    print("-" * 13)

# main function to test
if __name__ == "__main__":
    # creating 4x4 matrix
    matrix = [[0]*4 for _ in range(4)]
    path = find_shortest_path(matrix)
    if path:
        print("The shortest path found:", path)
        print("The number of steps taken by Ali:", len(path)-1)
        visualize_path(path)
    else:
        print("No path found")